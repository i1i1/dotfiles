edit() {
    if which emacs &>/dev/null; then
        emacsclient -a "" -c $* &>/dev/null &
        disown
    else
        e vim $*
    fi
}

lsips() {
    sudo true # just asking for sudo to make output look synchronous

    ifconfig | \
        awk '
    /^$/              { a = 1; next }
    a == 1            { a = 2; dev = $1; next }
    a == 2 && /inet / { a = 0; printf("% -8s %s\n", dev, $2) }
    ' | sort -h

    echo

    sudo nmap -n -sn 192.168.88.0/24 | \
        sed 1d | \
        awk 'FNR % 3 != 2' | \
        sed '$d' | sed '$d' | \
        awk '
    FNR % 2 == 1 { ip = $5 }
    FNR % 2 == 0 { sub(/^.*\(/, ""); sub(/\)$/, ""); printf("% -15s %s\n", ip":", $0) }
    ' | sort -h
}

lsssh() {
    awk '/^Host /{host=$2} /HostName/{hostname=$2} /User/{user=$2}
         /^$/{printf("% -20s%s@%s\n", host":", user, hostname)}' ~/.ssh/config
}

ssh() {
    is_new_ssh() {
        url=$(echo $1|awk -F@ '/@/{print $2;exit} {print}')
        (
            cut -d' ' -f1 ~/.ssh/known_hosts
            awk '/^Host/{print $2}' ~/.ssh/config
        ) | grep -qF $url && return 1
        return 0
    }
    add_alias() {
        user=$(echo $1|cut -d@ -f1)
        url=$(echo $1|cut -d@ -f2)
        yellow "New alias for "
        red    "$1: "
        read name
        (
            echo "Host $name"
            echo "     HostName $url"
            echo "     User $user"
            echo
        )  >> ~/.ssh/config 
    }
    connect() {
        e ssh $1 -t \
            "export RCFG=$RCFG;
             export RCFG_DIR=\$HOME/.sh/\$RCFG/;
             export RCFG_EXT=1;
             bash --rcfile \$RCFG_DIR/rc"
    }
    copy_config() {
        find ~/.sh/* -type f | \
            xargs stat -c %Y | \
            awk 'BEGIN{a=0} a < $1{a=$1} END{print a}' | \
            read timestamp
        e ssh $1 find '~/.sh/*' -type f | \
            e ssh $1 xargs stat -c %Y | \
            awk 'BEGIN{a=0} a < $1{a=$1} END{print a}' | \
            read timestamp_ssh

        [ ! -z "$timestamp_ssh" -a $timestamp -gt $timestamp_ssh ] && {
            green "Copying shell configuration\n"
            tar cfh - -C ~ .sh/ | e ssh $1 tar xfC - '~'
        }
    }
    color() {
        printf "\033[0;$1m"
        shift 1
        printf "$@"
        printf '\033[0m'
    }
    red()    { color 31 "$@" ; }
    green()  { color 32 "$@" ; }
    yellow() { color 33 "$@" ; }

    [ $# != 1 ] && e ssh $@ && return $?
    host=$1

    is_new_ssh $host || {
        copy_config $host
        connect $host
        return $?
    }

    red "$host "
    green "is new ssh host.\n"
    add_alias $host
    ssh-copy-id $host

    green "Copying shell configuration\n"
    copy_config $host

    green "Done! Now loging in\n"
    connect $host
}

_gcloud_create() {
    PROJECT=$1
    MACHINE_TYPE=$2
    DISK_SIZE=$3
    if [ "$4" = true ]; then FLAG=--google-preemptible; fi
    MACHINE_NAME=$5

    docker-machine ls -q | grep ^"$MACHINE_NAME"$ || {
        docker-machine create \
                       --driver google \
                       $FLAG \
                       --google-disk-size $DISK_SIZE \
                       --google-machine-type $MACHINE_TYPE \
                       --google-project $PROJECT \
                       --google-zone europe-north1-b \
                       $MACHINE_NAME
    }

    eval $(docker-machine e $MACHINE_NAME)
}

dcm_work() { _gcloud_create copper-tracker-270409 n1-standard-16 35 false i1i1; }

unalias_many() { for a in "$@"; do unalias "$a" 2>/dev/null; done; }

unalias_many diff g grep ls l la ll "..." "...."


diff() {
    tmppipe=$(mktemp)
    chmod 600 $tmppipe
    e diff -u --color=always "$@" > $tmppipe
    ret=$?
    case $ret in
        1) cat $tmppipe | less -R ;;
        0) echo Files are same ;;
    esac
    rm $tmppipe
    return $ret
}

git_() {
    if [ -z "$RCFG_EXT" ]; then
        XDG_CONFIG_HOME=$RCFG_DIR/git/home e git "$@"
    else
        XDG_CONFIG_HOME=$RCFG_DIR/git/ssh  e git "$@"
    fi
}

..()   { cd ..;   }
...()  { ..;  ..; }
....() { ...; ..; }
ca()   { cargo "$@"; }
cat()  { whatis bat &>/dev/null && bat "$@" || e cat "$@" }
dc()   { docker "$@"; }
dcc()  { docker-compose "$@"; }
dcm()  { docker-machine "$@"; }
e()    { env "$@"; }
ec()   { edit "$@"; }
g()    { git "$@"; }
git()  { git_ "$@"; }
grep() { e grep --color=auto "$@"; }
l()    { ls "$@"; }
la()   { ll -a "$@"; }
ldwn() { find ~/Download -type f | xargs -d '\n' ls -t | head -1; }
less() { e less -R "$@"; }
ll()   { ls -l "$@"; }
ls()   { ls_ --color=auto "$@"; }
ls_()  { exa / &>/dev/null && exa --color-scale "$@" || e ls "$@"; }
rg()   { e rg --color=auto "$@"; }
t()    { todotxt-machine $TODO_DIR/todo.txt $TODO_DIR/archive.txt;  }
top()  { whatis bashtop &>/dev/null && bashtop || whatis htop &>/dev/null && htop || e top }
vi()   { vim "$@"; }
vim()  { edit "$@"; }
wttr() { e cat ~/.cache/wttr; }
supervisorctl() { e supervisorctl -c .config/supervisord.conf; }


#
# In order to make parallel loops like this:
#
#   for ar in *.tar; pdo
#       tar xf $ar
#   pdone
#
alias pdo='do while [ $(jobs | wc -l) = 8 ]; do sleep 0.01; done; ('
alias pdone=') & done; wait'
